Readme
  how to setup

Readme
  how to use

OLD:

Doing the testing

command line stuff

1% ETH fee to specified address for charity

Document buy time in seconds or milliseconds

Creator of contract cannot call the killswitch

Auto withdrawal - withdrawl for all contributors?
  killswitch activated || 1hr && tokens received

auto_withdraw -> withdraw, callable by anyone who has sent money
  withdraws for everyone
    -> everyone must withdraw for themselves
    -> keep track of addresses which have added ether
    -> do etherscan on contributing addresses, try to refund each address found

Keep track of how much tokens have come in and gone out on a per user basis
  Not subtracting from balances, adding to withdrawals.

  total tokens in = total sent variable + contract token balance
  mapping for withdrawn
  expected withdrawal balance = total ETH sent * total tokens in / total ETH in
  send = expected withdrawn balance - existing withdrawn balance



New:

Node tool

  Common:

  Set provider
  Check connection
  Get user address (get from .eth.accounts?)
  Check user address is valid
  Set .defaultaccount with valid address

  Deploy:

  Compile and get ABI
  .estimateGas() to estimate gas
  Deploy contract
  Get tx-receipt to get new contract address

  Generate:

  get function params from user
  load contract with address and abi
  .call() to see if tx is valid / returns expected result?
  .estimateGas() to estimate gas
  call .generate( ...args ) on contract
  Get tx-receipt to get new contract address










Web3.js questions:

  What is mist?

Web3.js Notes: https://github.com/ethereum/wiki/wiki/JavaScript-API

  Getting Started:

    Intro:

      communicates with local node only
      has eth object for communicating with eth node.
      can  be installed with npm
      create a web3 instance with setting a provider
        if using mist? before setting a provider check if web3 is available?
          check if web3 is defined, if is
            use web3.currentProvider


    Callbacks:

      All requests are synchronous HTTP requests
      To do stuff async pass in a callback as the last function arg.
        The callback uses an error first style
          (err, res) { ... }


    Batch requests:

      Useful for ensuring ordered processing of requests

        // create batch object
        var batch = web3.createBatch();

        // add requests to the batch object
        batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback));
        batch.add(web3.eth.contract(abi).at(address).balance.request(address, callback2));

        // call execute on the batch object
        batch.execute();


    Numbers:

      web3 returns numbers as BigNumber objects
      for math on these numbers call arithmetic methods

        balance.plus(21).toString(10);

      For balances always do the logic using wei to avoid using decimal numbers (floating point)


  API Reference:

    Versions:

      web3.version.api -> the etherium js api version
      web3.version.node -> the client version
      web3.version.network -> the network protocol version
      web3.version.ethereum -> the ethereum protocol version
      web3.version.whisper -> the whisper protocol verson

    Provider:

      web3.isConnected() -> returns bool if a connection exists
      web3.setProvider() -> sets the provider
      web3.currentProvider() -> get the current provider
      web3.reset() -> reset state of web3

    Data conversions:

      web3.sha3(string, opts) -> Keccak-256 hash of a string
      web3.toHex(any) -> converts anything to hex
      web3.toAscii(hexString) -> converts hex to ascii
      web3.fromAscii(string, opts) -> ascii to hex
      web3.toDecimal(hexString) -> converts hex to number
      web3.fromDecimal(number) -> converts number to hex
      web3.fromWei(number, eth unit) -> converts wei to another ether unit
      web3.toWei(number, unit) -> converts eth unit amount to wei
      web3.toBigNumber(string) -> converts hex or number string to BigNumber
      web3.isAddress(hexString) ->  returns bool if hex is valid address

    web3.net

      web3.net.listening -> returns bool if node is listening for a network connection
      web3.net.peerCount -> returns number of connected peers

    web3.eth

      web3.eth.defaultAccount -> the default address used for sendTransaction and call methods
      web3.eth.defaultBlock -> default block used for some methods. Default is latest
      web3.eth.syncing -> returns false of a syncing object
      web3.eth.isSyncing(callback) -> calls a callback on sync start, update, stop. returns an isSyncing object
      web3.eth.coinbase -> read only. returns address where mining rewards are sent
      web3.eth.mining -> returns bool if mining
      web3.eth.hashrate -> returns hashes per second of the mining
      web3.eth.gasPrice -> returns average gas price
      web3.eth.accounts -> returns list of accounts the node controls
      web3.eth.blockNumber -> returns most recent block number
      web3.eth.getBalance(address, opts) -> returns balance in wei for an address
      web3.eth.getStorageAt(address, position, ops) -> get storage at a given position of an address
      web3.eth.getCode(address, opts) -> get code at specific address as hex
      web3.eth.getBlock(block hash or number, opts) -> gets a block object
      web3.eth.getBlockTransactionCount(hash or number, opts) -> returns number of transaction in a block
      web3.eth.getUncle(block hash or number, uncle number, opts) -> returns uncle hashes
      web3.eth.getTransaction(txHash, opts) -> returns transaction object
      web3.eth.getTransactionFromBlock(block hash or number, transaction index, opts) -> returns a transaction object
      web3.eth.getTransactionReceipt(txHash, opts) -> returns receipt object of the tx
      web3.eth.getTransactionCount(address, opts) -> get number of txns sent from an address
      web3.eth.sendTransaction(txObject, opts) -> sends a tx to the network
      web3.eth.sendRawTransaction(signedTxData, opts) -> send a raw txn
      web3.eth.sign(address, data, opts) -> sign data from an unlocked account
      web3.eth.call(call object, opts) -> executes a message call transaction on the VM of the node (as test?)
      web3.eth.estimateGas(callObject, opts) -> executes transaction con the VM of the node (as test?)
      web3.eth.filter() -> watch and filter blockchain events for addresses / status / more
      web3.eth.contract(abi) -> load contract abi
      web3.eth.contract(abi).at() -> load existing contract code from address
      web3.eth.contract(abi).new( ...params, data object) -> deploy a new contract
